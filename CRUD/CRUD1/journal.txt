Journal
This journal is to write down thoughts as I continue through the project. It will help internalize everything as well as provide insight into what I am doing.

Step 1:
We are building a CRUD app... CRUD means Create,Read,Update,Delete application. It's common in social media and blogs. It's fairly important to learn as a skill since pieces of it (such as how to save and how to delete) are largely important in other facets of web programming.

Project Setup: Create 3 files named index.html,style.css,main.js  and then put them on live server.

Step 2:
For HTML, put the basic template as laid out.

<body>
<h1>Social Media App</h1>
<div class="container">
    <div class="left"></div>
    <div class="right"></div>
</div>

</body>

To translate the code in our body: We have a heading called Social Media App. It sits structurally above a container div(classed as container).

Inside that container div are 2 more divs, .left and .right.

Step 3: The tutorial requires us to put our posts on the left side....so we have to put in .left a form.

<div class="left">
    <form id="form">
        <label for="post"> Write your post here</label>
        <br><br>
        <textarea name="post" id="input" cols="30" rows="10"></textarea>
        <br><br>
        <div id="msg"></div>
        <button type="submit">Post</button>
    </form>
</div>

This code makes a form called #form.  It has a label for some feature called "post" and tells users to write their post inside. It has 2 breaks for spacing and then it has a textarea element to hold the text. Since we are posting multi-lines potentially there is good reason to use textarea over input.  It's attributes give it id of #input", a name for backend of "post", and it assigns 30(width) x 10(height) via col/row system.

There is beneath a container div (#msg) that I suspect will house our message after JS, and it's type is submit because it'll do as it's text says (Post).

On the right side however, in .right , we put an h3 that says "your posts here" and another div with id #posts so perhaps this is where it'll display...or just a listing of posts.

Step 4: Add fontawesome fonts...
Step 5: Make sample posts.

We made sample posts inside of a div container #posts. Each consists of a div with a <p></p> nested inside and a span that has "options" for us (2 icons from font-awesome representing edit/delete).

Step 6: Add css
body {
    font-family:sans-serif;
    margin: 0 50px;
}
This sets the body to font-family of sans-serif for all text unless specified elsewhere.
This also puts a margin of 50px on the left/right sides in the shorthand while turning off the top/bottom ones.

.container {
    display: flex;
    gap: 50px;
}

This sets our container (holding both .left and .right) to be flexbox. This probably will be the method used to put them side by side.  A gap was indicated of 50px. After checking on screen it seems to be the space between .left and .right.

#posts {
    width:400px;
}

This sets the space for our post area with the posts we've already got.

i {
    cursor:pointer;
}
This sets the mouse to a pointer hand (like when clicking links) as it hovers on the icons. This is a visual indicator of what it's going to do (when we are done).

Step 7: more CSS for #posts.

#posts div {
    display:flex;
    align-items: center;
    justify-content: space-between;
}

This will make the display flex...and then align-items will center the content and justify-content will arrange them based on the space between the elements involved.

Visually this centers the posts and moves the icons over to the right side a bit.

.options {
    display:flex;
    gap:25px;
}

This one separates and spaces out the icons better within the span.

#msg {
    color:red;
}
This one doesn't seem to have an effect at this point though text in #msg will turn red.

Oddly enough in the visuals provided it shows the icons next to one another and underneath....

Step 8: Adding JavaScript.
The logical flow is like this:
Application --> button click ->submit. --> formValidation { success and failure}
success -->accept and store data -->upload on screen -->reset form,update/delete --> upload on screen.

failure -->Error Message.

Form Validation: We target all ID selectors in the HTML.
let form = document.getElementById("form");
let input = document.getElementById("input");
let msg = document.getElementById("msg");
let posts = document.getElementById("posts");

This JS code allows us to target using variables. form will be form variable, input input variable, msg msg variable, and so on...
By doing this, we can just call them directly.
**This resembles the jQuery  we did in FCC front-end libraries.

Next step is to make an event listener for submitting the form.  This will prevent the default behavior so we can slip formValidation in.

form.addEventListener("submit", (e) => {
    e.preventDefault();
    console.log("button clicked");

    formValidation();
    });

    let formValidation = () => {};
})

How this breaks apart:
form uses the function for an event listener on submit. The event triggers a function.

The function activates something called "preventDefault()" and console.log's the button being clicked.....and then runs another function called "formValidation(). It defines this afterward.